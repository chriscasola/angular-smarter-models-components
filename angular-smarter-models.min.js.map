{"version":3,"sources":["/source/module.ts","/source/model-instance.ts","angular-smarter-models.min.js","/source/model.ts","/source/model-list-item-instance.ts","/source/model-error.ts","/source/model-data-retriever.ts","/source/model-factory.ts"],"names":["AngularSmarterModels","AngularSmarterModels.ModelInstance","AngularSmarterModels.ModelInstance.constructor","get","AngularSmarterModels.ModelInstance.props","enumerable","configurable","AngularSmarterModels.ModelInstance.serialize","AngularSmarterModels.ModelInstance.merge","AngularSmarterModels.ModelInstance.setModelPath","AngularSmarterModels.ModelInstance.getModelPath","AngularSmarterModels.ModelInstance.save","AngularSmarterModels.ModelInstance.delete","AngularSmarterModels.Model","AngularSmarterModels.Model.constructor","AngularSmarterModels.Model.get","AngularSmarterModels.Model.getAsync","AngularSmarterModels.Model.list","AngularSmarterModels.Model.listAsync","AngularSmarterModels.Model.create","AngularSmarterModels.ModelListItemInstance","AngularSmarterModels.ModelListItemInstance.constructor","AngularSmarterModels.ModelListItemInstance.config","AngularSmarterModels.ModelListItemInstance.props","AngularSmarterModels.ModelError","AngularSmarterModels.ModelError.constructor","AngularSmarterModels.ModelError.props","AngularSmarterModels.ModelError.error","AngularSmarterModels.ModelError.time","__extends","this","d","b","__","constructor","p","hasOwnProperty","prototype","Object","create","AngularSmarterModels.buildUrl","pathComponent","subValue","params","slice","undefined","ModelDataRetrieverError","path","AngularSmarterModels.ModelDataRetrieverError","AngularSmarterModels.ModelDataRetrieverError.constructor","AngularSmarterModels.ModelDataRetriever","AngularSmarterModels.ModelDataRetriever.constructor","AngularSmarterModels.ModelDataRetriever.cacheModel","AngularSmarterModels.ModelDataRetriever.cacheError","AngularSmarterModels.ModelDataRetriever.cacheList","AngularSmarterModels.ModelDataRetriever.hasListCache","AngularSmarterModels.ModelDataRetriever.shouldRetryFetch","AngularSmarterModels.ModelDataRetriever.addModelToList","AngularSmarterModels.ModelDataRetriever.removeModelFromList","AngularSmarterModels.ModelDataRetriever.get","AngularSmarterModels.ModelDataRetriever.getAsync","AngularSmarterModels.ModelDataRetriever.getMultiple","AngularSmarterModels.ModelDataRetriever.list","AngularSmarterModels.ModelDataRetriever.listAsync","_a","AngularSmarterModels.ModelDataRetriever.save","AngularSmarterModels.ModelDataRetriever.create","AngularSmarterModels.ModelDataRetriever.delete","retryInterval","interval","$injector","instantiate","ModelDataRetriever","AngularSmarterModels.modelFactory","ModelBuilder","route","listPath","SMModel","SMModelInstance","smModelDataRetriever","AngularSmarterModels.ModelBuilder","AngularSmarterModels.ModelBuilder.constructor","AngularSmarterModels.ModelBuilder.model","AngularSmarterModels.ModelBuilder.modelInstance","AngularSmarterModels.ModelBuilder.modelDataRetriever","AngularSmarterModels.ModelBuilder.listPath","AngularSmarterModels.ModelBuilder.idField","AngularSmarterModels.ModelBuilder.done"],"mappings":"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","file":"angular-smarter-models.min.js","sourcesContent":["/// <reference path=\"../typings/tsd.d.ts\"/>\n\nmodule AngularSmarterModels {\n  export var smModule: ng.IModule = angular.module('sm.models', []);\n}\n","/// <reference path=\"../typings/tsd.d.ts\"/>\n/// <reference path=\"./module.ts\"/>\n/// <reference path=\"./model-wrapper.ts\"/>\n\nmodule AngularSmarterModels {\n  export interface ModelInstanceConfig {\n    rawModel: any,\n    modelPath: string,\n    modelDataRetriever: ModelDataRetriever,\n    listPath: string,\n    idField: string,\n  }\n\n  export class ModelInstance implements ModelWrapper {\n    constructor(public config:ModelInstanceConfig) {\n      if (!angular.isObject(this.config.rawModel)) {\n        this.config.rawModel = {};\n      }\n    }\n\n    get props() {\n      return this.config.rawModel;\n    }\n\n    serialize():string {\n      return JSON.stringify(this.config.rawModel);\n    }\n\n    merge(src):void {\n      angular.extend(this.config.rawModel, src);\n    }\n\n    setModelPath(path):void {\n      this.config.modelPath = path;\n    }\n\n    getModelPath():string {\n      return this.config.modelPath;\n    }\n\n    save():ng.IPromise<void> {\n      return this.config.modelDataRetriever.save(this);\n    }\n\n    delete():ng.IPromise<void> {\n      return this.config.modelDataRetriever.delete(this.config.modelPath, this.config.listPath, this.config.idField);\n    }\n  }\n\n  smModule.value('SMModelInstance', ModelInstance);\n}\n",null,"/// <reference path=\"./module.ts\"/>\n/// <reference path=\"./model-instance.ts\"/>\n/// <reference path=\"./model-wrapper.ts\"/>\n\nmodule AngularSmarterModels {\n  export interface ModelConfig {\n    modelDataRetriever: ModelDataRetriever,\n    modelPath: string,\n    listPath: string,\n    ModelInstance: any,\n    idField: string\n  }\n\n  export class Model {\n    constructor(private config:ModelConfig) {\n\n    }\n\n    get(params):ModelInstance {\n      return this.config.modelDataRetriever.get(this.config.modelPath, this.config.listPath, params, this.config.ModelInstance, this.config.idField);\n    }\n\n    getAsync(params):ng.IPromise<ModelInstance> {\n      return this.config.modelDataRetriever.getAsync(this.config.modelPath, this.config.listPath, params, this.config.ModelInstance, this.config.idField);\n    }\n\n    list(params):ModelWrapper[] {\n      return this.config.modelDataRetriever.list(this.config.listPath, this.config.modelPath, params, this.config.idField);\n    }\n\n    listAsync(params):ng.IPromise<ModelWrapper[]> {\n      return this.config.modelDataRetriever.listAsync(this.config.listPath, this.config.modelPath, params, this.config.idField);\n    }\n\n    create(params, props):ng.IPromise<ModelInstance> {\n      const createPath = this.config.modelPath.split('/').slice(0, -1).join('/') + '/';\n      return this.config.modelDataRetriever.create(createPath, this.config.listPath, params, new this.config.ModelInstance({\n        rawModel: props,\n        modelDataRetriever: this.config.modelDataRetriever,\n        modelPath: this.config.modelPath,\n        idField: this.config.idField,\n      }));\n    }\n  }\n\n  smModule.value('SMModel', Model);\n}\n","/// <reference path=\"../typings/tsd.d.ts\"/>\n/// <reference path=\"./module.ts\"/>\n/// <reference path=\"./model-wrapper.ts\"/>\n\nmodule AngularSmarterModels {\n  export class ModelListItemInstance implements ModelWrapper {\n    constructor(private _config) {\n\n    }\n\n    get config() {\n      return this._config.config;\n    }\n\n    get props() {\n      return this._config.rawModel;\n    }\n  }\n\n  smModule.value('SMModelListItemInstance', ModelListItemInstance);\n}\n","/// <reference path=\"../typings/tsd.d.ts\"/>\n/// <reference path=\"./module.ts\"/>\n/// <reference path=\"./model-wrapper.ts\"/>\n\nmodule AngularSmarterModels {\n  export interface ModelErrorConfig {\n    error: string,\n    time: number,\n  }\n\n  export class ModelError implements ModelWrapper {\n    constructor(public config:ModelErrorConfig) {\n\n    }\n\n    get props() {\n      return undefined;\n    }\n\n    get error():string {\n      return this.config.error;\n    }\n\n    get time():number {\n      return this.config.time;\n    }\n  }\n}\n","/// <reference path=\"./module.ts\"/>\n/// <reference path=\"./model-instance.ts\"/>\n/// <reference path=\"./model.ts\"/>\n/// <reference path=\"./model-list-item-instance.ts\"/>\n/// <reference path=\"./model-error.ts\"/>\n\nmodule AngularSmarterModels {\n  export class ModelDataRetrieverError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = 'ModelDataRetrieverError';\n    }\n  }\n\n  var retryInterval = 10000;\n\n  function buildUrl(path, params) {\n    return path.split('/').map(function(pathComponent) {\n      if (pathComponent[0] === ':') {\n        const subValue = params[pathComponent.slice(1)];\n        if (subValue !== null && subValue !== undefined) {\n          return subValue;\n        }\n        throw new ModelDataRetrieverError(`Missing required param \"${pathComponent.slice(1)}\" for path \"${path}\"!`);\n      }\n      return pathComponent;\n    }).join('/');\n  }\n\n  export class ModelDataRetriever {\n    static $inject: string[] = ['$q', '$http'];\n\n    // TODO: use a weak map for this cache? then we'd cache as long as something in the app/scope\n    // was using the model, but then let it be cleared once garbage collection runs\n    private modelCache: Object;\n    private outstandingRequests: Object;\n    private listCache: Object;\n\n    constructor(private $q: ng.IQService, private $http: ng.IHttpService) {\n      this.modelCache = {};\n      this.outstandingRequests = {};\n      this.listCache = {};\n    }\n\n    private cacheModel(modelUrl: string, listUrl: string, ModelInstance, modelData, identifyingField:string): ModelInstance {\n      const self = this;\n      const modelInstance = new ModelInstance({\n        rawModel: modelData,\n        modelDataRetriever: self,\n        modelPath: modelUrl,\n        listPath: listUrl,\n        idField: identifyingField,\n      });\n      this.modelCache[modelUrl] = modelInstance;\n      this.addModelToList(listUrl, modelInstance, 0);\n      return modelInstance;\n    }\n\n    private cacheError(modelUrl: string, listUrl: string, identifyingField: string): ModelError {\n      const errorInstance = new ModelError({\n        error: 'An error occurred fetching the model!',\n        time: Date.now(),\n      });\n      this.modelCache[modelUrl] = errorInstance;\n      return errorInstance;\n    }\n\n    private cacheList(modelUrl: string, modelData): ModelWrapper[] {\n      this.listCache[modelUrl] = modelData;\n      return modelData;\n    }\n\n    private hasListCache(modelUrl: string): boolean {\n      const cacheItem = this.listCache[modelUrl];\n      return this.listCache.hasOwnProperty(modelUrl) && cacheItem !== null;\n    }\n\n    private shouldRetryFetch(modelError: ModelError) {\n      return Date.now() - modelError.time > retryInterval;\n    }\n\n    private addModelToList(modelUrl: string, model:ModelWrapper, position:number = 0) {\n      if (this.hasListCache(modelUrl)) {\n        const modelList = this.listCache[modelUrl];\n        for (let i = 0; i < modelList.length; i++) {\n          if (modelList[i].props[model.config.idField] === model.props[model.config.idField]) {\n            modelList[i] = model;\n            return;\n          }\n        }\n        this.listCache[modelUrl].splice(position, 0, model);\n      }\n    }\n\n    private removeModelFromList(modelUrl: string, modelId: string, identifyingField: string) {\n      const modelList = this.listCache[modelUrl];\n      for (let i = 0; i < modelList.length; i++) {\n        if (modelList[i].props[identifyingField] === modelId) {\n          modelList.splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    get(modelPath:string, listPath:string, params, ModelInstance, identifyingField:string):ModelInstance {\n      const modelUrl = buildUrl(modelPath, params);\n      const cachedValue = this.modelCache[modelUrl];\n      const valueInCache = this.modelCache.hasOwnProperty(modelUrl);\n\n      if ( !valueInCache || (cachedValue instanceof ModelError && this.shouldRetryFetch(cachedValue))) {\n        this.getAsync(modelPath, listPath, params, ModelInstance, identifyingField);\n      }\n\n      if (valueInCache) {\n        return cachedValue;\n      }\n    }\n\n    getAsync(modelPath:string, listPath:string, params, ModelInstance, identifyingField:string):ng.IPromise<ModelInstance> {\n      const modelUrl = buildUrl(modelPath, params);\n      let modelPromise;\n      const cachedValue = this.modelCache[modelUrl];\n\n      if (this.modelCache.hasOwnProperty(modelUrl) && !(cachedValue instanceof ModelError)) {\n        modelPromise = this.$q.when(cachedValue);\n      } else if (this.outstandingRequests.hasOwnProperty(modelUrl)) {\n        modelPromise = this.outstandingRequests[modelUrl];\n      } else {\n        modelPromise = this.$http.get(modelUrl)\n        .then(response => {\n          return this.cacheModel(modelUrl, listPath, ModelInstance, response.data, identifyingField);\n        })\n        .catch(response => {\n          return this.$q.reject(this.cacheError(modelUrl, listPath, identifyingField));\n        })\n        .finally(() => {\n          delete this.outstandingRequests[modelUrl];\n        });\n        this.outstandingRequests[modelUrl] = modelPromise;\n      }\n      return modelPromise;\n    }\n\n    getMultiple(modelPath:string, listPath:string, params, ModelInstance, identifyingField:string):ng.IPromise<Array<ModelInstance>> {\n      const modelUrl = buildUrl(modelPath, params);\n      let modelPromise;\n      if (this.outstandingRequests.hasOwnProperty(modelUrl)) {\n        modelPromise = this.outstandingRequests[modelUrl];\n      } else {\n        modelPromise = this.$http.get<Array<ModelInstance>>(modelUrl).then(response => {\n          if (!angular.isArray(response.data)) {\n            return this.$q.reject(new ModelDataRetrieverError(`Expected array of models for getMultiple request for path \"${modelUrl}\"!`));\n          }\n          return response.data.map(modelData => {\n            return this.cacheModel(modelUrl + '/' + modelData[identifyingField], listPath, ModelInstance, modelData, identifyingField);\n          });\n        })\n        .finally(() => {\n          delete this.outstandingRequests[modelUrl];\n        });\n        this.outstandingRequests[modelUrl] = modelPromise;\n      }\n      return modelPromise;\n    }\n\n    list(listPath:string, modelPath: string, params, identifyingField:string): ModelWrapper[] {\n      const modelUrl = buildUrl(listPath, params);\n      if (this.hasListCache(modelUrl)) {\n        return this.listCache[modelUrl];\n      }\n\n      if (this.listCache[modelUrl] !== null) {\n        this.listAsync(listPath, modelPath, params, identifyingField);\n      }\n    }\n\n    listAsync(listPath:string, modelPath:string, params, identifyingField:string):ng.IPromise<ModelWrapper[]> {\n      const modelUrl = buildUrl(listPath, params);\n      let modelPromise;\n      if (this.hasListCache(modelUrl)) {\n        modelPromise = this.$q.when(this.listCache[modelUrl]);\n      } else if (this.outstandingRequests.hasOwnProperty(modelUrl)) {\n        modelPromise = this.outstandingRequests[modelUrl];\n      } else {\n        modelPromise = this.$http.get<ModelWrapper[]>(modelUrl).then(response => {\n          if (!angular.isArray(response.data)) {\n            return this.$q.reject(new ModelDataRetrieverError(`Expected array of models for list request for path \"${modelUrl}\"!`));\n          }\n          const modelList = response.data.map(listItem => {\n            const actualModelParams = {\n              [identifyingField]: listItem[identifyingField]\n            }\n            angular.extend(actualModelParams, params);\n            const actualModelUrl = buildUrl(modelPath, actualModelParams);\n            if (this.modelCache.hasOwnProperty(actualModelUrl)) {\n              return this.modelCache[actualModelUrl];\n            } else {\n              return new ModelListItemInstance({\n                rawModel: listItem,\n                config: {\n                  idField: identifyingField,\n                },\n              });\n            }\n          });\n          return this.cacheList(modelUrl, modelList);\n        })\n        .catch(response => {\n          this.listCache[modelUrl] = null;\n          return this.$q.reject(response);\n        })\n        .finally(() => {\n          delete this.outstandingRequests[modelUrl];\n        });\n        this.outstandingRequests[modelUrl] = modelPromise;\n      }\n      return modelPromise;\n    }\n\n    save(model:ModelInstance):ng.IPromise<void> {\n      return this.$http.post<void>(model.getModelPath(), model.serialize()).then(response => {\n          // do nothing, do this to return a standard angular promise instead of an $http one\n      });\n    }\n\n    create(modelPath:string, listPath:string, params, model:ModelInstance):ng.IPromise<ModelInstance> {\n      const modelUrl = buildUrl(modelPath, params);\n      return this.$http.put(modelUrl, model.serialize()).then(response => {\n        model.merge(response.data);\n        this.modelCache[response.headers('Location')] = model;\n        this.addModelToList(listPath, model);\n        return model;\n      });\n    }\n\n    delete(modelPath:string, listPath:string, identifyingField:string):ng.IPromise<void> {\n      let modelId;\n      if (this.modelCache.hasOwnProperty(modelPath)) {\n        modelId = this.modelCache[modelPath].props[identifyingField];\n      }\n      delete this.modelCache[modelPath];\n      return this.$http.delete(modelPath).then(response => {\n        if (modelId != null) {\n          this.removeModelFromList(listPath, modelId, identifyingField);\n        }\n      });\n    }\n  }\n\n  interface ISMModelDataRetrieverProvider extends ng.IServiceProvider {\n    setRetryInterval(number)\n  }\n\n  var serviceProvider:ISMModelDataRetrieverProvider = {\n    setRetryInterval: function(interval) {\n      retryInterval = interval;\n    },\n\n    $get: ['$injector', function($injector) {\n      return $injector.instantiate(ModelDataRetriever);\n    }]\n  };\n\n  smModule\n    .value('smModelDataRetrieverError', ModelDataRetrieverError)\n    .provider('smModelDataRetriever', serviceProvider);\n}\n","/// <reference path=\"./module.ts\"/>\n/// <reference path=\"./model-instance.ts\"/>\n/// <reference path=\"./model.ts\"/>\n/// <reference path=\"./model-data-retriever.ts\"/>\n\nmodule AngularSmarterModels {\n\n  export class ModelBuilder {\n    constructor(private route:string, private _listPath:string, private Model, private ModelInstance, private _modelDataRetriever:ModelDataRetriever, private _idField:string) {\n\n    }\n\n    model(Model):ModelBuilder {\n      this.Model = Model;\n      return this;\n    }\n\n    modelInstance(ModelInstance):ModelBuilder {\n      this.ModelInstance = ModelInstance;\n      return this;\n    }\n\n    modelDataRetriever(modelDataRetriever):ModelBuilder {\n      this._modelDataRetriever = modelDataRetriever;\n      return this;\n    }\n\n    listPath(listPath):ModelBuilder {\n      this._listPath = listPath;\n      return this;\n    }\n\n    idField(fieldName):ModelBuilder {\n      this._idField = fieldName;\n      return this;\n    }\n\n    done():Model {\n      return new this.Model({\n        modelPath: this.route,\n        ModelInstance: this.ModelInstance,\n        modelDataRetriever: this._modelDataRetriever,\n        listPath: this._listPath,\n        idField: this._idField,\n      });\n    }\n  }\n\n  export interface modelBuilder {\n    (route: string, listPath:string): ModelBuilder;\n  }\n\n  function modelFactory(SMModel, SMModelInstance, smModelDataRetriever):modelBuilder {\n    var service:modelBuilder = function(route:string, listPath:string):ModelBuilder {\n      return new ModelBuilder(route, listPath, SMModel, SMModelInstance, smModelDataRetriever, 'id');\n    };\n    return service;\n  }\n\n  modelFactory.$inject = ['SMModel', 'SMModelInstance', 'smModelDataRetriever'];\n\n  angular.module('sm.models').factory('smModelFactory', modelFactory);\n}\n"],"sourceRoot":"/source/"}